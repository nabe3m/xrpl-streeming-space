// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = env("DATABASE_PROVIDER")
    url      = env("DATABASE_URL")
}

model User {
    id              String   @id @default(cuid())
    walletAddress   String   @unique
    nickname        String?
    avatarUrl       String?
    emailHash       String?
    twitterHandle   String?
    facebookHandle  String?
    instagramHandle String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    // NFTokenMinter settings
    nftokenMinter   String?  // Authorized NFTokenMinter address
    nftokenMinterSetAt DateTime? // When the minter was set

    // Relations
    createdRooms    Room[]
    roomParticipants RoomParticipant[]
    sentPaymentChannels PaymentChannel[] @relation("Sender")
    receivedPaymentChannels PaymentChannel[] @relation("Receiver")
    mintedNFTs      NFT[]
    nftTickets      NFTTicket[]

    @@index([walletAddress])
}

model Room {
    id                String   @id @default(cuid())
    title             String
    description       String?
    creatorId         String
    creator           User     @relation(fields: [creatorId], references: [id])
    agoraChannelName  String   @unique
    xrpPerMinute      Float    @default(0.01)
    nftTokenId        String?  // NFT token ID for entry restriction
    nftCollectionId   String?  // NFT collection ID for entry restriction
    status            RoomStatus @default(WAITING)
    startedAt         DateTime?
    endedAt           DateTime?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    // NFT Ticket Mode fields
    paymentMode       PaymentMode @default(PAYMENT_CHANNEL)
    nftTicketPrice    Float?    // Price in XRP for NFT ticket
    nftTicketImageUrl String?   // IPFS URL for NFT image
    nftTicketMetadataUri String? // IPFS URL for NFT metadata
    nftTicketTaxon    Int?      // Taxon for NFT series

    // Relations
    participants      RoomParticipant[]
    paymentChannels   PaymentChannel[]
    nftTickets        NFTTicket[]

    @@index([creatorId])
    @@index([status])
    @@index([paymentMode])
}

model RoomParticipant {
    id              String   @id @default(cuid())
    roomId          String
    room            Room     @relation(fields: [roomId], references: [id])
    userId          String
    user            User     @relation(fields: [userId], references: [id])
    role            ParticipantRole @default(LISTENER)
    joinedAt        DateTime @default(now())
    leftAt          DateTime?
    totalTimeSeconds Int      @default(0)
    totalPaidXrp    Float    @default(0)
    canSpeak        Boolean  @default(false) // リスナーが発言権を持っているか
    speakRequestedAt DateTime? // 発言権をリクエストした時刻

    @@unique([roomId, userId])
    @@index([roomId])
    @@index([userId])
}

model PaymentChannel {
    id              String   @id @default(cuid())
    channelId       String   @unique
    roomId          String
    room            Room     @relation(fields: [roomId], references: [id])
    senderId        String
    sender          User     @relation("Sender", fields: [senderId], references: [id])
    receiverId      String
    receiver        User     @relation("Receiver", fields: [receiverId], references: [id])
    amount          String   // Total amount in drops
    balance         String   @default("0") // Current balance in drops
    settleDelay     Int      @default(86400)
    publicKey       String
    status          ChannelStatus @default(OPEN)
    lastSignature   String?
    lastAmount      String?  // Last signed amount in drops
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    closedAt        DateTime?

    @@index([roomId])
    @@index([senderId])
    @@index([receiverId])
    @@index([status])
}

model NFT {
    id              String   @id @default(cuid())
    tokenId         String   @unique
    creatorId       String
    creator         User     @relation(fields: [creatorId], references: [id])
    title           String
    description     String?
    imageUrl        String
    metadataUri     String
    roomId          String?
    transactionHash String
    createdAt       DateTime @default(now())

    @@index([creatorId])
    @@index([tokenId])
}

model NFTTicket {
    id              String   @id @default(cuid())
    tokenId         String   @unique
    roomId          String
    room            Room     @relation(fields: [roomId], references: [id])
    ownerId         String
    owner           User     @relation(fields: [ownerId], references: [id])
    issuerId        String   // Host's wallet address
    price           Float    // Price paid in XRP
    mintTxHash      String?  // NFTokenMint transaction hash
    acceptTxHash    String?  // NFTokenAcceptOffer transaction hash
    status          NFTTicketStatus @default(PENDING)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([roomId])
    @@index([ownerId])
    @@index([tokenId])
    @@index([status])
}

enum RoomStatus {
    WAITING
    LIVE
    ENDED
}

enum ParticipantRole {
    HOST
    LISTENER
}

enum ChannelStatus {
    OPEN
    CLOSING
    CLOSED
}

enum PaymentMode {
    PAYMENT_CHANNEL
    NFT_TICKET
}

enum NFTTicketStatus {
    PENDING
    MINTED
    OFFER_CREATED
    ACCEPTED
    FAILED
}
